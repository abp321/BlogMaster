@using BlogMaster.Shared.Models
@using System.Globalization

@if(BlogPost is null)
{
    <p>Loading...</p>
}
else
{
    <div class="container my-5">
        <div class="mb-4">
            <h1 class="display-4">@BlogPost.Title</h1>
            <p class="text-muted">
                By <strong>@BlogPost.Author</strong> on @BlogPost.PublishedDate.ToString("MMMM dd, yyyy", CultureInfo.InvariantCulture)
            </p>
            <p class="lead"><em>Views: @BlogPost.ViewCount</em></p>
        </div>

        <div class="mb-5">
            <p>@BlogPost.Content</p>
        </div>

        <hr />

        <div class="mt-5">
            <h3>Comments</h3>
            @if (BlogPost.Comments.Any())
            {
                <ul class="list-group list-group-flush">
                    @foreach (var comment in BlogPost.Comments.OrderByDescending(c => c.PostedDate))
                    {
                        <li class="list-group-item">
                            <div class="d-flex justify-content-between">
                                <strong>@comment.Author</strong>
                                <small class="text-muted">@comment.PostedDate.ToString("MMMM dd, yyyy HH:mm", CultureInfo.InvariantCulture)</small>
                            </div>
                            <p class="mt-2 preserve-linebreaks">@comment.Content</p>
                        </li>
                    }
                </ul>
            }
            else
            {
                <div class="alert alert-info">No comments yet. Be the first to comment!</div>
            }
        </div>

        <div class="mt-5">
            <CommentEditor OnCommentSubmitted="OnCommentSubmitted" />
        </div>

        <button class="btn btn-secondary mt-4" @onclick="OnBackClicked">
            <i class="bi bi-arrow-left me-2"></i>Back to Posts
        </button>
    </div>
}

@code {
    [Parameter]
    public BlogDto? BlogPost { get; set; }

    [Parameter]
    public EventCallback OnBack { get; set; }

    [Parameter]
    public EventCallback<CommentDto> OnCommentAdded { get; set; }

    Task OnBackClicked()
    {
        return OnBack.InvokeAsync(null);
    }

    Task OnCommentSubmitted(CommentDto comment)
    {
        if (BlogPost is not null)
        {
            comment.BlogPostId = BlogPost.Id;
            return OnCommentAdded.InvokeAsync(comment);
        }
        return Task.CompletedTask;
    }
}