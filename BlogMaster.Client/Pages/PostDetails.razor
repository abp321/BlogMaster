@page "/postdetails/{Id:int}"
@rendermode InteractiveAuto
@using BlogMaster.Shared.Interfaces
@using BlogMaster.Shared.Models
@inject IBlogService blogService
@inject NavigationManager navigationManager
@inject PersistentComponentState applicationState
@inject IWebAssemblyStateCacheService<BlogDto> stateCacheService
@implements IDisposable

@if (blogPost is null)
{
    <p>Loading...</p>
}
else
{
    <BlogPostDetailsContent BlogPost="blogPost"
                            OnBack="GoBack"
                            OnCommentAdded="HandleCommentAdded" />
}

@code {
    [Parameter]
    public int Id { get; set; }

    private BlogDto? blogPost;
    private PersistingComponentStateSubscription? _subscription;
    private readonly TaskCompletionSource initializeCompletion = new(TaskCreationOptions.RunContinuationsAsynchronously);

    protected override async Task OnInitializedAsync()
    {
        _subscription = applicationState.RegisterOnPersisting(PersistState);
        string cacheKey = $"BlogPost_{Id}";

        if (TryGetState(cacheKey))
        {
            blogPost = await blogService.GetBlog(Id);

            if (blogPost is null)
            {
                navigationManager.NavigateTo("/blogs");
                return;
            }

            stateCacheService.SetItem(cacheKey, blogPost);
        }
        initializeCompletion.TrySetResult();
    }

    bool TryGetState(string cacheKey)
    {
        return !applicationState.TryTakeFromJson(cacheKey, out blogPost) &&
            !stateCacheService.TryGetItem(cacheKey, out blogPost);
    }

    private Task PersistState()
    {
        if (blogPost is null) return Task.CompletedTask;

        string cacheKey = $"BlogPost_{Id}";
        applicationState.PersistAsJson(cacheKey, blogPost);
        return Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await initializeCompletion.Task;
            await IncrementView();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    void GoBack()
    {
        navigationManager.NavigateTo("/blogs");
    }

    async Task HandleCommentAdded(CommentDto comment)
    {
        if (blogPost is null) return;

        blogPost.AddComment(comment);
        var updatedBlog = await blogService.UpdateBlog(blogPost);
        if (updatedBlog is not null)
        {
            blogPost = updatedBlog;
            string cacheKey = $"BlogPost_{Id}";
            stateCacheService.SetItem(cacheKey, blogPost);
        }
    }

    async Task IncrementView()
    {
        if (blogPost is null) return;

        blogPost.ViewCount++;
        await blogService.UpdateBlog(blogPost);
        string cacheKey = $"BlogPost_{Id}";
        stateCacheService.SetItem(cacheKey, blogPost);
    }

    public void Dispose()
    {
        _subscription?.Dispose();
    }
}
