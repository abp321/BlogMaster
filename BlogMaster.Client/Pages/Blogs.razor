@page "/blogs"
@rendermode InteractiveWebAssembly
@using BlogMaster.Shared.Interfaces
@using BlogMaster.Shared.Models
@inject IBlogService blogService
@inject NavigationManager navigationManager

<h1>Blog Posts</h1>

<button class="btn btn-primary" @onclick="CreateNewPost">Create New Post</button>

<ul class="list-group mt-3">
    @foreach (var post in blogs)
    {
        <li class="list-group-item">
            <h3>@post.Title</h3>
            <p>By @post.Author on @post.PublishedDate.ToString("MM/dd/yyyy") | Views: @post.ViewCount</p>
            <button class="btn btn-link btn-sm" @onclick="() => ViewPost(post.Id)">View Details</button>
            <button class="btn btn-secondary btn-sm" @onclick="() => EditPost(post.Id)">Edit</button>
            <button class="btn btn-danger btn-sm" @onclick="async () => await DeletePost(post.Id)">Delete</button>
        </li>
    }
</ul>

@code {
    List<BlogDto> blogs = [];

    protected override async Task OnInitializedAsync()
    {
        blogs = await blogService.GetBlogs() ?? [];
        await base.OnInitializedAsync();
    }

    void CreateNewPost()
    {
        navigationManager.NavigateTo("/editpost");
    }

    void EditPost(int id)
    {
        navigationManager.NavigateTo($"/editpost/{id}");
    }

    void ViewPost(int id)
    {
        navigationManager.NavigateTo($"/postdetails/{id}");
    }

    async Task DeletePost(int id)
    {
        await blogService.DeleteBlog(id);
        await InvokeAsync(StateHasChanged);
    }
}
