@page "/blogs"
@rendermode InteractiveAuto
@using BlogMaster.Shared.Interfaces
@using BlogMaster.Shared.Models
@using System.Globalization
@inject IBlogService blogService
@inject NavigationManager navigationManager
@inject PersistentComponentState applicationState
@inject IWebAssemblyStateCacheService stateCacheService
@implements IDisposable

<h1 class="mb-4">Blog Posts</h1>

<button class="btn btn-primary mb-4" @onclick="CreateNewPost">
    <i class="bi bi-plus-circle me-2"></i>Create New Post
</button>

@if (blogs is null)
{
    <div class="alert alert-info">No blog posts available.</div>
}
else
{
    <div class="row g-4" style="max-width:400px;">
        @foreach (var post in blogs)
        {
            <div class="col-12">
                <div class="card h-100">
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title">@post.Title</h5>
                        <p class="card-text text-muted mb-2">
                            By <strong>@post.Author</strong> on @post.PublishedDate.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture)
                        </p>
                        <p class="card-text mb-4">
                            <i class="bi bi-chat-dots me-1"></i>@post.Comments.Count
                            <span class="ms-3"><i class="bi bi-eye me-1"></i>@post.ViewCount</span>
                        </p>
                        <div class="mt-auto">
                            <button class="btn btn-outline-primary btn-sm me-2" @onclick="() => ViewPost(post.Id)">
                                <i class="bi bi-eye"></i> View
                            </button>
                            <button class="btn btn-outline-secondary btn-sm me-2" @onclick="() => EditPost(post.Id)">
                                <i class="bi bi-pencil"></i> Edit
                            </button>
                            <button class="btn btn-outline-danger btn-sm" @onclick="async () => await DeletePost(post.Id)">
                                <i class="bi bi-trash"></i> Delete
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}



@code {
    List<BlogDto>? blogs = [];
    private PersistingComponentStateSubscription? _subscription;

    protected override async Task OnInitializedAsync()
    {
        _subscription = applicationState.RegisterOnPersisting(PersistBlogs);
        TryGetState("BlogsKey");
        var newBlogs = await blogService.GetBlogs();
        UpdateBlogList(newBlogs);

        await base.OnInitializedAsync();
    }

    void UpdateBlogList(List<BlogDto>? newBlogs)
    {
        if (blogs is null)
        {
            blogs = newBlogs ?? [];
            stateCacheService.SetItem("BlogsKey", blogs);
            return;
        }

        if (newBlogs is null)
        {
            blogs.Clear();
            stateCacheService.SetItem("BlogsKey", blogs);
            return;
        }

        if (!newBlogs.SequenceEqual(blogs))
        {
            blogs.Clear();
            blogs.AddRange(newBlogs);
            stateCacheService.SetItem("BlogsKey", blogs);
        }
    }

    bool TryGetState(string cacheKey)
    {
        return !applicationState.TryTakeFromJson(cacheKey, out blogs) &&
            !stateCacheService.TryGetItem(cacheKey, out blogs);
    }

    private Task PersistBlogs()
    {
        applicationState.PersistAsJson("BlogsKey", blogs);
        return Task.CompletedTask;
    }

    void CreateNewPost()
    {
        navigationManager.NavigateTo("/editpost");
    }

    void EditPost(int id)
    {
        navigationManager.NavigateTo($"/editpost/{id}");
    }

    void ViewPost(int id)
    {
        navigationManager.NavigateTo($"/postdetails/{id}");
    }

    async Task DeletePost(int id)
    {
        await blogService.DeleteBlog(id);
        blogs.RemoveAll(b => b.Id == id);
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        _subscription?.Dispose();
    }
}
